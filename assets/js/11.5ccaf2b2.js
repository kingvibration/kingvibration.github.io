(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{324:function(n,e,t){"use strict";t.r(e);var i=t(325),o=t.n(i);for(var s in i)["default"].indexOf(s)<0&&function(n){t.d(e,n,(function(){return i[n]}))}(s);e.default=o.a},325:function(n,e){},431:function(n,e,t){"use strict";t.d(e,"a",(function(){return i})),t.d(e,"b",(function(){return o}));var i=function(){var n=this.$createElement,e=this._self._c||n;return e("ContentSlotsDistributor",{attrs:{"slot-key":this.$parent.slotKey}},[e("html",{attrs:{lang:"en"}},[e("head",[e("meta",{attrs:{charset:"UTF-8"}}),this._v(" "),e("title",[this._v("Title")])]),this._v(" "),e("body",[e("pre",[this._v("    [html] 说说你对cookie和session的理解\n"),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[this._v('  cookie: 可以通过客户端, 服务端设置, 容量小, 可以通过设置domain来实现同步登录, 除了name, value, 它还有多个选项, domain, path, secure, expires, 客户端和服务端可以通过cookie来通讯, 传递信息\n\n  session: 由服务端设置并发起, 是服务端对于用户行为的一种凭证, 通常也是由cookie来维持这种关系, 比如session_id, 或者现在webstorm设置的Webstorm-bb00fc34等! 通过这种维持两者的关系,\n\n  一般cookie在客户端产生存储，当然服务端也可以生成cookie。session在服务端产生，二者都可以用来鉴权，服务端产生session，以及对应的sessionid，传给客户端，可以存在cookie里面或者localstorage里面，每次请求携带sessionid，服务端去判定是否有权限访问。现在鉴权的方式一般cookie、session鉴权，token鉴权或者jwt鉴权\n\n  两者作用：会话保持的功能，为了解决http无状态的问题\n\n  区别：\n  安全性：cookie保存在客户端，可在本地查看修改，安全性不高。session的用户信息保存在服务器端，发给客户端的只是一个用户id，相对更安全\n  限制：cookie有大小和数量限制，session没有大小限制，只有时间限制\n\n  当然，session对比cookie来说，几乎所有的点都比cookie要优秀，更安全、没有大小的数量的限制，唯一不足就是会增加服务器的负担\n\n[css] 实现单行文本居中和多行文本左对齐并超出显示"..."\n\n  <div style="text-align: center">\n    .one {\n      text-align: center\n    }\n  </div>\n\n  <div style="overflow: hidden;\n      text-overflow: ellipsis;\n      display: -webkit-box;\n      -webkit-line-clamp: 3;\n      -webkit-box-orient: vertical">\n    .multi {\n      overflow: hidden;\n      text-overflow: ellipsis;\n      display: -webkit-box;\n      -webkit-line-clamp: 3;\n      -webkit-box-orient: vertical;\n    }\n  </div>\n\n  可惜多行文本省略, 有严重的兼容性问题\n\n  方案二： 伪元素 &::after -> content: \'...\';\n\n[js] 说说你对eval的理解\n\n  eval() 相当于一个小型的js解析器，接受一个字符串，可以把字符串解析成js代码并执行，所以有很有大的安全隐患，并且写进去的代码都是字符串，不利于维护，使用它执行代码性能也会大大折扣，所以正常情况下不建议使用。\n\n  🌟不安全的,\n  🌟容易出错, 因为你不知道你传入的参数是什么鬼\n  🌟性能低下.\n  🌟某种情况下跟new Function(), setTimeout, setInterval类似\n  🌟不利于代码可维护性, 可拓展性\n  🌟不是在无可奈何的情况下, 请不要使用\n\n\n[软技能] 你知道网页三剑客指的是什么吗？你有用过Dreamwear吗？\n\n  Dreamweaver, Firework, Flash.\n')])])])])])])])},o=[]},447:function(n,e,t){"use strict";t.r(e);var i=t(431),o=t(324);for(var s in o)["default"].indexOf(s)<0&&function(n){t.d(e,n,(function(){return o[n]}))}(s);var r=t(42),a=Object(r.a)(o.default,i.a,i.b,!1,null,null,null);e.default=a.exports}}]);